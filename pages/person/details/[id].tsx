import { fetchPersonDetails } from "fetch/fetchPersonDetails";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { BASE_IMG_ORIGINAL, BASE_IMG_W500 } from "globalConst";
import { fetchPersCombinedCredit, fetchPersonPopular } from "fetch";
import Link from "next/link";
import { UIEventHandler, useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";

type TDetails = {
  person: {
    name: string;
    profile_path: string;
    biography: string;
    also_known_as: any[];
  };
  credits: any[];
};

const Details: NextPage<TDetails> = ({ person, credits }) => {
  const { name, profile_path, biography } = person;
  const as = person.also_known_as;
  const ref = useRef<HTMLUListElement>(null!);
  const [index, setIndex] = useState(0);
  const router = useRouter();

  useEffect(() => {
    const { offsetLeft } = ref.current.children[index] as HTMLElement;
    ref.current.scrollLeft = offsetLeft;
    console.log(offsetLeft);
    console.log(index);
  }, [index]);

  const handleScroll: UIEventHandler<HTMLUListElement> = (e) => {
    const { scrollLeft, children } = e.target as Element;
    let i = 0;
    while (i < credits.length) {
      const { offsetLeft } = children[i] as HTMLElement;
      if (scrollLeft === offsetLeft) {
        setIndex(i);
        break;
      }
      i++;
    }
  };

  console.log(credits);

  return (
    <main className="bg-black min-h-screen overflow-x-hidden max-w-screen overflow-y-auto text-white relative">
      <Head>
        <title>Hilman App | {person.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <span className="fixed w-full h-screen">
        <span className="absolute w-[200px] h-[200px] bottom-0 bg-black-500 right-0 blur-3xl opacity-10"></span>
        <span className="absolute w-[150px] h-[150px] bottom-0 bg-red left-0 blur-3xl opacity-20"></span>
        <span className="absolute w-[150px] h-[150px] top-40 bg-red right-0 blur-3xl opacity-20"></span>
      </span>
      <div className="absolute z-10  px-3 md:px-0 pt-[20px] min-h-screen w-full">
        <section className="container mx-auto mb-2">
          <header className="font-thin mb-[20px]">
            <button
              onClick={() => router.push("/person")}
              className="container mx-auto py-2 flex gap-2"
            >
              <span>
                <Image
                  width={10}
                  height={10}
                  src="/icons/arrow-left.svg"
                  alt=""
                />
              </span>
              back to person
            </button>
          </header>
          <div className="relative flex gap-[16px] flex-col md:flex-row">
            <div className="shrink-0 relative aspect-[2/3] w-full md:w-[300px] h-full bg-black-500 rounded-[10px]">
              <Image
                className="rounded-[10px]"
                layout="fill"
                src={BASE_IMG_ORIGINAL + profile_path}
                alt=""
              />
            </div>
            <div className="max-w-full">
              <div className="md:max-w-[calc(100%-316px)]">
                <h1 className="text-5xl font-bold mb-6">{name}</h1>
                <p className="font-thin opacity-80 h-[190px] overflow-auto mb-6 md:mb-2">
                  {biography}
                </p>
                <div className="flex justify-between items-center mb-2">
                  <h6>Known For:</h6>
                  <div className="flex gap-2">
                    <button
                      onClick={() => {
                        index > 0 ? setIndex(index - 1) : null;
                      }}
                      className="relative bg-white bg-opacity-10 rounded-full flex p-2"
                    >
                      <Image
                        src={"/icons/arrow-left.svg"}
                        width={10}
                        height={10}
                        alt=""
                      />
                    </button>
                    <button
                      onClick={() => {
                        index < credits.length - 1 ? setIndex(index + 1) : null;
                      }}
                      className="relative bg-white bg-opacity-10 rounded-full flex p-2"
                    >
                      <Image
                        src={"/icons/arrow-right.svg"}
                        width={10}
                        height={10}
                        alt=""
                      />
                    </button>
                  </div>
                </div>
              </div>
              <div>
                <div className="relative flex items-center w-screen">
                  <ul
                    ref={ref}
                    onScroll={handleScroll}
                    className="relative snap-x snap-mandatory flex gap-1 pr-[80%] overflow-auto scrollbar-hidden scroll-smooth"
                  >
                    {credits.map(
                      (
                        {
                          backdrop_path,
                          title,
                          media_type,
                          id,
                          name,
                          poster_path,
                        },
                        i
                      ) => {
                        const titleDisplay = title ? title : name;
                        const imagePath = backdrop_path
                          ? backdrop_path
                          : poster_path;
                        return (
                          <Link
                            key={i}
                            href={"/" + media_type + "/" + "details/" + id}
                          >
                            <a className="snap-start w-[200px] shrink-0">
                              <div className="w-full aspect-video relative bg-black-500">
                                {imagePath && (
                                  <Image
                                    layout="fill"
                                    src={BASE_IMG_W500 + imagePath}
                                    alt=""
                                  />
                                )}
                              </div>
                              <h6 className="font-thin mt-2 text-xs tracking-wider">
                                {titleDisplay}
                              </h6>
                            </a>
                          </Link>
                        );
                      }
                    )}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </section>
        <section className="container mx-auto">
          <h5 className="mb-3">Also known as:</h5>
          <ul className="flex gap-4 flex-wrap mb-6 font-thin max-w-full">
            {as.map((as_name, i) => {
              return (
                <li
                  key={i}
                  className="bg-white bg-opacity-10 px-5 rounded-full whitespace-nowrap"
                >
                  {as_name}
                </li>
              );
            })}
          </ul>
        </section>
      </div>
    </main>
  );
};

export const getServerSideProps: GetServerSideProps<TDetails> = async (ctx) => {
  let { id } = ctx.query;
  const person = await fetchPersonDetails(id!.toString());
  const credits = await fetchPersCombinedCredit(id!.toString());

  return {
    props: {
      person,
      credits: credits.cast,
    },
  };
};

export default Details;
