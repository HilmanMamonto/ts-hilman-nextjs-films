import { GetServerSideProps, NextPage } from "next";
import Image from "next/image";
import { useState, useEffect } from "react";
import Head from "next/head";
import { fetchVideos, fetchFilmDetails, fetchWatchProviders } from "fetch";
import { BASE_IMG_ORIGINAL } from "globalConst";
import Carousel from "components/Carousel";
import Button from "components/Button";
import SeasonsList from "components/SeasonsList";
import WatchProviders from "components/WatchProviders";
import Link from "next/link";
import { useRouter } from "next/router";

type TFilm = {
  release_date: string;
  first_air_date: string;
  title: string;
  name: string;
  poster_path: string;
  backdrop_path: string;
  genres: any[];
  overview: any[];
  runtime: number;
  vote_average: number;
  seasons: any[];
};

type TWatchProviders = {
  buy: any[];
  flatrate: any[];
};

type TDetails = {
  film: TFilm;
  videos: [];
  watchProviders: TWatchProviders;
};

const Details: NextPage<TDetails> = ({ film, videos, watchProviders }) => {
  const {
    release_date,
    first_air_date,
    title,
    name,
    poster_path,
    backdrop_path,
    genres,
    overview,
    runtime,
    vote_average,
    seasons,
  } = film;

  const [imgAs, setImgAs] = useState("");
  const titleDisplay = title ? title : name;
  let release = "";
  if (release_date) release_date.split("-")[0];
  if (first_air_date) first_air_date.split("-")[0];
  const imgUrl = BASE_IMG_ORIGINAL + imgAs;

  const { buy, flatrate } = watchProviders;
  const router = useRouter();

  useEffect(() => {
    window.innerWidth < 500 ? setImgAs(poster_path) : setImgAs(backdrop_path);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <main className="bg-black snap-mandatory snap-y">
      <Head>
        <title> Hilman App | Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="snap-start h-screen relative w-full text-white bg-cover">
        <button
          onClick={() => router.back()}
          className="absolute cursor-pointer top-0 z-20 pl-3 mt-5"
        >
          back
        </button>
        <div className="relative w-full h-full">
          {imgAs && (
            <Image
              layout="fill"
              objectFit="cover"
              objectPosition={"center"}
              src={imgUrl}
              alt={titleDisplay}
              quality={100}
              priority
            />
          )}
        </div>
        <span className="absolute h-[650px] bg-gradient-to-t from-black bottom-[-2px] z-10 w-full"></span>
        <div className="absolute left-0 bottom-0 z-20 w-full px-3 lg:px-20 mb-10 lg:mb-20">
          <h1 className="text-[2rem] lg:text-[68px] mb-5 font-bold">
            {titleDisplay}
          </h1>
          <div className="flex items-center gap-2 mb-5 text-sm font-light">
            <span>{vote_average}</span>
            <span className="w-[3px] h-[3px] bg-white rounded-full" />
            <span>{runtime} minutes</span>
            <span className="w-[3px] h-[3px] bg-white rounded-full" />
            <span>{release}</span>
          </div>
          <ul className="flex gap-4 flex-wrap text-sm mb-5">
            {genres.map(({ name }: typeof film, i: number) => {
              return (
                <li
                  key={i}
                  className="backdrop-blur-[1px] whitespace-nowrap bg-opacity-10 bg-white px-3 py-1 flex-items-center rounded-full font-light"
                >
                  {name}
                </li>
              );
            })}
          </ul>
          <p className="tracking-wide max-w-[270px] max-h-[100px] overflow-auto md:max-w-[600px] mb-10 font-thin">
            {overview}
          </p>
          <div className="flex gap-3">
            <Button onClick={() => ""} label="Rate Now" />
            <Button
              onClick={() => ""}
              variant="secondary"
              label="View Trailer"
            />
          </div>
        </div>
      </section>
      <section className="snap-start bg-black text-white w-full pt-20 min-h-screen">
        {videos.length > 0 && (
          <Carousel className="mb-20 px-3 lg:px-20" data={videos} />
        )}
        {seasons && <SeasonsList data={seasons} />}
        {/* <Videos /> */}
        {(buy || flatrate) && (
          <WatchProviders title="Watch Providers" data={buy ? buy : flatrate} />
        )}
      </section>
    </main>
  );
};

export const getServerSideProps: GetServerSideProps<TDetails> = async (ctx) => {
  const { category, id } = ctx.query;
  type CategoryId = typeof category & typeof id;
  const film = await fetchFilmDetails<CategoryId>(category, id);
  const videos = await fetchVideos<CategoryId>(category, id);
  const watchProviders = await fetchWatchProviders<CategoryId>(category, id);

  return {
    props: {
      film: film ? film : [],
      videos: videos ? videos : [],
      watchProviders: watchProviders ? watchProviders : [],
    },
  };
};

export default Details;
