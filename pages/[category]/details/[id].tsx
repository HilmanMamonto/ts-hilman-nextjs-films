import {
  GetServerSideProps,
  GetStaticProps,
  InferGetServerSidePropsType,
} from "next";
import Image from "next/image";
import Button from "../../../components/Button";
import { useState, useEffect } from "react";
import Head from "next/head";
import { fetchFilmDetails } from "../../../fetch/fetchFilmDetails";
import Carousel from "../../../components/Carousel";

type PropsType = InferGetServerSidePropsType<typeof getServerSideProps>;

const Details = ({ film, videos }: PropsType) => {
  const {
    release_date,
    first_air_date,
    title,
    name,
    poster_path,
    backdrop_path,
  } = film;
  console.log(videos);

  const [imgAs, setImgAs] = useState("");
  const titleDisplay = title ? title : name;
  let release = "";
  if (release_date) release_date.split("-")[0];
  if (first_air_date) first_air_date.split("-")[0];
  const baseImg = "https://image.tmdb.org/t/p/original";
  const imgUrl = baseImg + imgAs;

  useEffect(() => {
    window.innerWidth < 500 ? setImgAs(poster_path) : setImgAs(backdrop_path);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <main className="bg-black snap-mandatory snap-y">
      <Head>
        <title> Hilman App | Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="snap-start h-screen relative w-full text-white bg-cover">
        <div className="w-full h-full">
          {imgAs && (
            <Image
              layout="fill"
              objectFit="cover"
              objectPosition={"center"}
              src={imgUrl}
              alt={titleDisplay}
              quality={100}
            />
          )}
        </div>
        <span className="absolute h-[650px] bg-gradient-to-t from-black bottom-[-2px] z-10 w-full"></span>
        <div className="absolute left-0 bottom-0 z-20 w-full px-3 lg:px-20 mb-10 lg:mb-20">
          <h1 className="text-[2rem] lg:text-[68px] mb-5 font-bold">
            {titleDisplay}
          </h1>
          <div className="flex items-center gap-2 mb-5 text-sm font-light">
            <span>{film.vote_average}</span>
            <span className="w-[3px] h-[3px] bg-white rounded-full" />
            <span>{film.runtime} minutes</span>
            <span className="w-[3px] h-[3px] bg-white rounded-full" />
            <span>{release}</span>
          </div>
          <ul className="flex gap-4 flex-wrap text-sm mb-5">
            {film.genres.map(({ name }: typeof film, i: number) => {
              return (
                <li
                  key={i}
                  className="backdrop-blur-[1px] whitespace-nowrap bg-opacity-10 bg-white px-3 py-1 flex-items-center rounded-full font-light"
                >
                  {name}
                </li>
              );
            })}
          </ul>
          <p className="tracking-wide max-w-[270px] max-h-[100px] overflow-auto md:max-h-fit md:max-w-[600px] mb-10 font-light">
            {film.overview}
          </p>
          <div className="flex gap-3">
            <Button label="Rate Now" />
            <Button variant="secondary" label="View Trailer" />
          </div>
        </div>
      </section>
      <section className="snap-start bg-black text-white w-full pt-20 min-h-screen">
        {videos && <Carousel className="px-3 lg:px-20" data={videos} />}
        {/* {data.seasons && <SeasonsList data={data.seasons} />}
      <Videos /> */}
        {/* {watchProviders && (
        <ItemsGrid title="Watch Providers" data={watchProviders.flatrate} />
      )} */}
      </section>
    </main>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { category, id } = ctx.query;
  const film = await fetchFilmDetails<typeof category & typeof id>(
    category,
    id
  );

  const videos = await fetchFilmDetails<typeof category & typeof id>(
    category,
    id
  );

  return {
    props: {
      film,
      videos,
    },
  };
};

export default Details;
