import { fetchSeasonDetails } from "fetch";
import { fetchPersonDetails } from "fetch/fetchPersonDetails";
import { BASE_IMG_ORIGINAL, BASE_IMG_W500 } from "globalConst";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { UIEventHandler, useEffect, useRef, useState } from "react";

type TSeason = {
  season: { poster_path: string; name: string; episodes: any[] };
};

const Season: NextPage<TSeason> = ({ season }) => {
  console.log(season);
  const { poster_path, name, episodes } = season;
  const [index, setIndex] = useState(0);
  const ref = useRef<HTMLUListElement>(null!);

  useEffect(() => {
    // hanlde next prev;
    const { children } = ref.current;
    const child = children[index] as HTMLElement;
    ref.current.scrollLeft = child.offsetLeft;
  }, [index]);

  const handleScroll: UIEventHandler<HTMLUListElement> = (e) => {
    const { scrollLeft } = e.target as Element;
    const { children } = ref.current;
    let i = 0;
    while (i < children.length) {
      const child = children[i] as HTMLElement;
      if (scrollLeft === child.offsetLeft) {
        child.offsetLeft;
        setIndex(i);
        break;
      }
      i++;
    }
  };

  const router = useRouter();
  const { category, id } = router.query;
  const backPath = "/" + category + "/details/" + id;

  return (
    <section className="bg-black w-full min-h-screen text-white relative">
      <Head>
        <title> Hilman App | {name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <button
        onClick={() => router.push(backPath)}
        className="absolute font-thin z-20 pl-3 md:pl-20 pt-10 top-0 cursor-pointer flex gap-2 items-center"
      >
        <Image
          src="/icons/arrow-left.svg"
          quality={100}
          width={10}
          height={10}
          alt=""
        />
        back
      </button>
      <div className="absolute top-0 w-full h-full opacity-80">
        <Image
          src={BASE_IMG_ORIGINAL + episodes[index].still_path}
          layout="fill"
          alt=""
        />
      </div>
      <div className="absolute max-w-full pl-3 md:pl-20 z-10 bottom-0 right-0 mb-5">
        <div className="flex items-center justify-between mb-5">
          <div className="flex items-center gap-2">
            <h1 className="text-xl md:text-3xl">{name} |</h1>
            <span className="font-thin">{episodes[index].name}</span>
          </div>
          <h2 className="text-2xl font-thin pr-3 md:pr-20">
            {index + 1}/{episodes.length}
          </h2>
        </div>
        <div className="relative flex items-center">
          <ul
            ref={ref}
            onScroll={handleScroll}
            className="relative flex gap-2 w-full overflow-auto snap-x snap-mandatory pr-[80%] scroll-smooth scrollbar-hidden"
          >
            {episodes.map(({ still_path, name }, i) => {
              return (
                <li key={i} className="snap-start relative shrink-0">
                  <div className="relative aspect-video w-[300px] bg-black-500 shadow-2xl">
                    <Image
                      src={BASE_IMG_ORIGINAL + still_path}
                      layout="fill"
                      alt=""
                    />
                  </div>
                  <div className="absolute hover:opacity-100 opacity-0 transition-all duration-500 cursor-pointer px-3 flex items-center justify-center bg-black-500 z-10 w-full h-full top-0 bg-opacity-80">
                    {name}
                  </div>
                </li>
              );
            })}
          </ul>
          <button
            hidden={index === 0}
            onClick={() => {
              index > 0 ? setIndex(index - 1) : null;
            }}
            className="z-20 opacity-80 hover:opacity-100 ml-5 absolute w-[40px] h-[40px] bg-white bg-opacity-40 flex items-center justify-center rounded-full"
          >
            <Image src="/icons/arrow-left.svg" width="20" height="20" alt="" />
          </button>
          <button
            hidden={index === episodes.length - 1}
            onClick={() => {
              index < episodes.length - 1 ? setIndex(index + 1) : null;
            }}
            className="z-20 opacity-80 hover:opacity-100 mr-3 md:mr-20 absolute w-[40px] h-[40px] bg-white bg-opacity-40 flex items-center justify-center rounded-full right-0"
          >
            <Image src="/icons/arrow-right.svg" width="20" height="20" alt="" />
          </button>
        </div>
      </div>
    </section>
  );
};

export const getServerSideProps: GetServerSideProps<TSeason> = async (ctx) => {
  const { id, season } = ctx.query;

  const results = await fetchSeasonDetails(id, season);

  return {
    props: {
      season: results,
    },
  };
};

export default Season;
